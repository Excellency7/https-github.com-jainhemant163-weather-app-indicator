{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","style","width","type","name","placeholder","Weather","city","country","temperature","humidity","description","marginLeft","src","icon","alt","error","App","state","undefined","_callee","e","APIKEY","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","process","fetch","concat","sent","json","console","log","_this","setState","current","temp_c","location","condition","text","stop","components_Title","components_Form","this","components_Weather","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b27e258.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Title=() =>(\n            <div>\n                <h1 className=\"title-container__title\"> Check the Weather!</h1>\n                <p className=\"title-container__subtitle\"> Find out the weather today...</p>\n            </div>\n        );\n\n \n\nexport default Title;","import React from \"react\";\n\nconst Form= props =>(\n\n          <form onSubmit={props.getWeather}>\n              <input style={({width:'100%'})} type= \"text\" name=\"city\" placeholder=\"Toronto, Sokoto, New York\"/>\n              {/* <input type= \"text\" name=\"country\" placeholder=\"COUNTRY\"/> */}\n              <button>Fetch City Weather</button>\n          </form>  \n        );\n\nexport default Form;\n","import React from \"react\";\n\nconst Weather = props => (\n\t<div className=\"weather__info\">\n\t {\t\n\t \tprops.city && props.country && <p className=\"weather__key\"> Location: \n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.description && <p className=\"weather__key\"> Conditions: \n\t \t\t<span className=\"weather__value\"> { props.description } </span> \n\t\t\t<span style={({marginLeft: '5px'})}></span>\n\t\t\t<img src={props.icon} alt={props.description} style={{ width: '40px', }}/>\n\t </p> \n\t }\n\t { \n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \n\t }\n\t</div>\n);\n\nexport default Weather;","import React from \"react\";\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\"\nimport Weather from \"./components/Weather\"\n\n// const API_Key = \"8a4e9026904a474f85f90336232810\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    // const country = e.target.elements.country.value;\n\n    let APIKEY = process.env.REACT_APP_WEATHER_APIKEY;\n\n    \n    const api_call = await fetch(`http://api.weatherapi.com/v1/forecast.json?q=${city}&key=${APIKEY}`);\n    const data = await api_call.json();\n    console.log(APIKEY);\n    console.log(\"fetching data\");\n    console.log(data);\n\n    if (city) {\n\n      this.setState({\n        temperature: data.current.temp_c,\n        city: data.location.name,\n        country: data.location.country,\n        humidity: data.current.humidity,\n        description: data.current.condition.text,\n        icon: data.current.condition.icon,\n        error: \"\"\n\n      }\n\n      );\n    }\n\n\n    else {\n\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        icon: undefined,\n        error: \"Please enter the value!\"\n\n      }\n\n      );\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather \n                    temperature={this.state.temperature} \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    icon={this.state.icon}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n};\n\n\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.REACT_APP_NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.REACT_APP_PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.REACT_APP_PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}